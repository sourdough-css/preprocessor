#!/usr/bin/env node

var fs = require('fs')
var exists = fs.existsSync
var logger = require('./logger')
var sourdough = require('..')
var path = require('path')
var resolve = path.resolve
var program = require('commander')
var read = require('read-file-stdin')
var write = require('write-file-stdout')
var chokidar = require('chokidar')

/**
 * Usage.
 */

program
  .version(require('../package.json').version)
  .usage('[<input>] [<output>]')
  .option('-i, --import-root [path]', 'the root directory for imported css files', '')
  .option('-v, --verbose', 'log verbose output for debugging')
  .option('-w, --watch', 'watch the input file for changes')

/**
 * Examples.
 */

program.on('--help', function () {
  console.log('  Examples:')
  console.log()
  console.log('    # pass an input and output file:')
  console.log('    $ sourdough input.css output.css')
  console.log()
  console.log('    # configure the import root directory:')
  console.log('    $ sourdough --import-root src/css input.css output.css')
  console.log()
  console.log('    # watch the input file for changes:')
  console.log('    $ sourdough --watch input.css output.css')
  console.log()
  console.log('    # unix-style piping to stdin and stdout:')
  console.log('    $ cat input.css | sourdough | grep background-color')
  console.log()
})

/**
 * Parse.
 */

program.parse(process.argv)

/**
 * Settings.
 */

var input = program.args[0] ? resolve(program.args[0]) : null
var output = program.args[1] ? resolve(program.args[1]) : null
var importRoot = program.importRoot
var verbose = program.verbose
var regen = program.watch && input && output

/**
 * Exists?
 */

if (input && !exists(input)) logger.fatal('not found', input)

/**
 * Run.
 */

run()

/**
 * Watch?
 */

var watchCSS

if (regen) {
  watchCSS = watcher(input)
  if (verbose) logger.log('watch', input)
}

function watcher (input) {
  var watchedFiles = [input]
  var index = {} // source files by entry point

  var watcher = chokidar.watch(watchedFiles)
  // recompile if any watched file is modified
  watcher.on('change', function (path) {
    logger.log('changed', path)
    run(input)
  })

  return function updateWatchedFiles (files, entryPoint) {
    // update source files for current entry point
    entryPoint = entryPoint || null
    index[entryPoint] = files
    // aggregate source files across entry points
    var entryPoints = Object.keys(index)
    var sources = entryPoints.reduce(function (files, entryPoint) {
      return files.concat(index[entryPoint])
    }, [])
    // update watch list
    watcher.unwatch(watchedFiles)
    watcher.add(sources)
    watchedFiles = sources
  }
}

/**
 * Run for the given input and output.
 */

function run () {
  read(input, function (err, buffer) {
    if (err) logger.throw(err)
    var css = buffer.toString()

    var onImportOptions = {
      root: importRoot,
      from: input,
      to: output,
      onImport: function (sources) {
        if (watchCSS) watchCSS(sources, this.from)
      }
    }
    var result = sourdough(css, onImportOptions)

    result.then(function (result) {
      css = result.css
      write(output, css + '\n')
      if (output) logger.log('write', output)
    })
    result.catch(function (error) {
      if (error.name === 'CssSyntaxError') {
        logger.log(error.message + error.showSourceCode())
      } else {
        logger.throw(error)
      }
    })
  })
}
